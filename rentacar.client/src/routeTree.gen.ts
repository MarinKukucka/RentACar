/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthorizedRoutesImport } from './routes/_authorizedRoutes'
import { Route as PublicRoutesIndexImport } from './routes/_publicRoutes/index'
import { Route as PublicRoutesSearchResultsImport } from './routes/_publicRoutes/SearchResults'
import { Route as AuthorizedRoutesProfileImport } from './routes/_authorizedRoutes/Profile'
import { Route as AuthorizationLoginImport } from './routes/_authorization/Login'
import { Route as AuthorizedRoutesVehiclesIndexImport } from './routes/_authorizedRoutes/vehicles/index'
import { Route as AuthorizedRoutesPeopleIndexImport } from './routes/_authorizedRoutes/people/index'

// Create/Update Routes

const AuthorizedRoutesRoute = AuthorizedRoutesImport.update({
  id: '/_authorizedRoutes',
  getParentRoute: () => rootRoute,
} as any)

const PublicRoutesIndexRoute = PublicRoutesIndexImport.update({
  id: '/_publicRoutes/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PublicRoutesSearchResultsRoute = PublicRoutesSearchResultsImport.update({
  id: '/_publicRoutes/SearchResults',
  path: '/SearchResults',
  getParentRoute: () => rootRoute,
} as any)

const AuthorizedRoutesProfileRoute = AuthorizedRoutesProfileImport.update({
  id: '/Profile',
  path: '/Profile',
  getParentRoute: () => AuthorizedRoutesRoute,
} as any)

const AuthorizationLoginRoute = AuthorizationLoginImport.update({
  id: '/_authorization/Login',
  path: '/Login',
  getParentRoute: () => rootRoute,
} as any)

const AuthorizedRoutesVehiclesIndexRoute =
  AuthorizedRoutesVehiclesIndexImport.update({
    id: '/vehicles/',
    path: '/vehicles/',
    getParentRoute: () => AuthorizedRoutesRoute,
  } as any)

const AuthorizedRoutesPeopleIndexRoute =
  AuthorizedRoutesPeopleIndexImport.update({
    id: '/people/',
    path: '/people/',
    getParentRoute: () => AuthorizedRoutesRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authorizedRoutes': {
      id: '/_authorizedRoutes'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthorizedRoutesImport
      parentRoute: typeof rootRoute
    }
    '/_authorization/Login': {
      id: '/_authorization/Login'
      path: '/Login'
      fullPath: '/Login'
      preLoaderRoute: typeof AuthorizationLoginImport
      parentRoute: typeof rootRoute
    }
    '/_authorizedRoutes/Profile': {
      id: '/_authorizedRoutes/Profile'
      path: '/Profile'
      fullPath: '/Profile'
      preLoaderRoute: typeof AuthorizedRoutesProfileImport
      parentRoute: typeof AuthorizedRoutesImport
    }
    '/_publicRoutes/SearchResults': {
      id: '/_publicRoutes/SearchResults'
      path: '/SearchResults'
      fullPath: '/SearchResults'
      preLoaderRoute: typeof PublicRoutesSearchResultsImport
      parentRoute: typeof rootRoute
    }
    '/_publicRoutes/': {
      id: '/_publicRoutes/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicRoutesIndexImport
      parentRoute: typeof rootRoute
    }
    '/_authorizedRoutes/people/': {
      id: '/_authorizedRoutes/people/'
      path: '/people'
      fullPath: '/people'
      preLoaderRoute: typeof AuthorizedRoutesPeopleIndexImport
      parentRoute: typeof AuthorizedRoutesImport
    }
    '/_authorizedRoutes/vehicles/': {
      id: '/_authorizedRoutes/vehicles/'
      path: '/vehicles'
      fullPath: '/vehicles'
      preLoaderRoute: typeof AuthorizedRoutesVehiclesIndexImport
      parentRoute: typeof AuthorizedRoutesImport
    }
  }
}

// Create and export the route tree

interface AuthorizedRoutesRouteChildren {
  AuthorizedRoutesProfileRoute: typeof AuthorizedRoutesProfileRoute
  AuthorizedRoutesPeopleIndexRoute: typeof AuthorizedRoutesPeopleIndexRoute
  AuthorizedRoutesVehiclesIndexRoute: typeof AuthorizedRoutesVehiclesIndexRoute
}

const AuthorizedRoutesRouteChildren: AuthorizedRoutesRouteChildren = {
  AuthorizedRoutesProfileRoute: AuthorizedRoutesProfileRoute,
  AuthorizedRoutesPeopleIndexRoute: AuthorizedRoutesPeopleIndexRoute,
  AuthorizedRoutesVehiclesIndexRoute: AuthorizedRoutesVehiclesIndexRoute,
}

const AuthorizedRoutesRouteWithChildren =
  AuthorizedRoutesRoute._addFileChildren(AuthorizedRoutesRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthorizedRoutesRouteWithChildren
  '/Login': typeof AuthorizationLoginRoute
  '/Profile': typeof AuthorizedRoutesProfileRoute
  '/SearchResults': typeof PublicRoutesSearchResultsRoute
  '/': typeof PublicRoutesIndexRoute
  '/people': typeof AuthorizedRoutesPeopleIndexRoute
  '/vehicles': typeof AuthorizedRoutesVehiclesIndexRoute
}

export interface FileRoutesByTo {
  '': typeof AuthorizedRoutesRouteWithChildren
  '/Login': typeof AuthorizationLoginRoute
  '/Profile': typeof AuthorizedRoutesProfileRoute
  '/SearchResults': typeof PublicRoutesSearchResultsRoute
  '/': typeof PublicRoutesIndexRoute
  '/people': typeof AuthorizedRoutesPeopleIndexRoute
  '/vehicles': typeof AuthorizedRoutesVehiclesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authorizedRoutes': typeof AuthorizedRoutesRouteWithChildren
  '/_authorization/Login': typeof AuthorizationLoginRoute
  '/_authorizedRoutes/Profile': typeof AuthorizedRoutesProfileRoute
  '/_publicRoutes/SearchResults': typeof PublicRoutesSearchResultsRoute
  '/_publicRoutes/': typeof PublicRoutesIndexRoute
  '/_authorizedRoutes/people/': typeof AuthorizedRoutesPeopleIndexRoute
  '/_authorizedRoutes/vehicles/': typeof AuthorizedRoutesVehiclesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/Login'
    | '/Profile'
    | '/SearchResults'
    | '/'
    | '/people'
    | '/vehicles'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/Login'
    | '/Profile'
    | '/SearchResults'
    | '/'
    | '/people'
    | '/vehicles'
  id:
    | '__root__'
    | '/_authorizedRoutes'
    | '/_authorization/Login'
    | '/_authorizedRoutes/Profile'
    | '/_publicRoutes/SearchResults'
    | '/_publicRoutes/'
    | '/_authorizedRoutes/people/'
    | '/_authorizedRoutes/vehicles/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthorizedRoutesRoute: typeof AuthorizedRoutesRouteWithChildren
  AuthorizationLoginRoute: typeof AuthorizationLoginRoute
  PublicRoutesSearchResultsRoute: typeof PublicRoutesSearchResultsRoute
  PublicRoutesIndexRoute: typeof PublicRoutesIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthorizedRoutesRoute: AuthorizedRoutesRouteWithChildren,
  AuthorizationLoginRoute: AuthorizationLoginRoute,
  PublicRoutesSearchResultsRoute: PublicRoutesSearchResultsRoute,
  PublicRoutesIndexRoute: PublicRoutesIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authorizedRoutes",
        "/_authorization/Login",
        "/_publicRoutes/SearchResults",
        "/_publicRoutes/"
      ]
    },
    "/_authorizedRoutes": {
      "filePath": "_authorizedRoutes.ts",
      "children": [
        "/_authorizedRoutes/Profile",
        "/_authorizedRoutes/people/",
        "/_authorizedRoutes/vehicles/"
      ]
    },
    "/_authorization/Login": {
      "filePath": "_authorization/Login.tsx"
    },
    "/_authorizedRoutes/Profile": {
      "filePath": "_authorizedRoutes/Profile.tsx",
      "parent": "/_authorizedRoutes"
    },
    "/_publicRoutes/SearchResults": {
      "filePath": "_publicRoutes/SearchResults.tsx"
    },
    "/_publicRoutes/": {
      "filePath": "_publicRoutes/index.tsx"
    },
    "/_authorizedRoutes/people/": {
      "filePath": "_authorizedRoutes/people/index.tsx",
      "parent": "/_authorizedRoutes"
    },
    "/_authorizedRoutes/vehicles/": {
      "filePath": "_authorizedRoutes/vehicles/index.tsx",
      "parent": "/_authorizedRoutes"
    }
  }
}
ROUTE_MANIFEST_END */
